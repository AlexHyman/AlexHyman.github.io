<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Http状态码]]></title>
    <url>%2F2018%2F07%2F20%2FHttp%E7%8A%B6%E6%80%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。 状态码告知从服务器端返回的请求结果状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。 状态码的分类 类别 原因短语 1XX Informational（信息性状态码） 接收的请求正在处理 2XX Success（成功状态码） 请求正常处理完毕 3XX Redirection（重定向状态码） 需要进行附加操作已完成请求 4XX Client Error（客户端错误状态码） 服务器无法处理请求 5XX Server Error（服务器端状态码） 服务器处理请求错误 2XX成功2XX的响应结果表明请求被正常处理了。 200 OK表示从客户端发来的请求在服务器端被正常处理。在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。比如，使用GET方法时，对应请求资源的实体会作为响应返回；而使用HEAD方法时，对应请求资源的实体主体不随报文首部作为响应返回（即在响应中只返回首部，不会返回实体的主体部分）。 204 No Content该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。比如，当从浏览器发出请求处理后，返回204响应，那么浏览器显示的页面不发生更新。一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。 206 Partial Content该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content——Range指定范围的实体内容。 3XX重定向3XX响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。 301 Moved Permanently永久重定向。该状态码表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。也就是说，如果已经把资源对应的URI保存为书签了，这时应该按Location首部字段提示的URI重新保存。像下方给出的请求URI，当指定资源路径的最后忘记添加斜杠“/”，就会产生301状态码。1http://example.com/sample 302 Found临时重定向。该状态码表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。和301 Moved Permanently状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。比如，用户把URI保存成书签，但不会像301状态码出现时那样去更新书签，而是仍旧保留返回302状态码的页面对应的URI。 303 See Other该状态码表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求资源。303状态码和302 Found状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码由区别。比如，当使用POST方法访问CGI程序，其执行后的处理结果是希望客户端能以GET方法重定向到另一个URI上去时，返回303状态码。虽然302 Found状态码也可以实现相同的功能，但这里使用303状态码时最理想的。 304 Not Modified该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。304状态码返回时，不包含任何响应的主体部分。304虽然被划分在3XX类别中，但是和重定向没有关系。 307 Temporary Redirect临时重定向。该状态码与302 Found有着相同的含义。尽管302标准禁止POST变换成GET，但实际使用时大家并不遵守。307会遵照浏览器标准，不会从POST变成GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。 4XX 客户端错误4XX的响应表明客户端是发生错误的原因所在。 400 Bad Request该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像200 OK一样对待该状态码。 401 Unauthorized该状态码表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。另外若之前已进行过1次请求，则表示用户认证失败。返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。当浏览器初次接收到401响应，会弹出认证用的对话窗口。 403 Forbidden该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源IP地址试图访问）等列举的情况都可能是发生403的原因。 404 Not Found该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 5XX 服务器错误5XX的响应结果表明服务器本身发生错误。 500 Internal Server Error该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的bug或某些临时的故障。 503 Service Unavailable该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。 状态码和状况不一致不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如Web应用程序内部发生错误，状态码依然返回200 OK，这种情况也经常遇到。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各种协议与HTTP协议的关系]]></title>
    <url>%2F2018%2F07%2F19%2F%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emmet插件基本语法]]></title>
    <url>%2F2018%2F07%2F10%2Femmet%E6%8F%92%E4%BB%B6%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具。基本上，大多数的文本编辑器都会允许你存储和重用一些代码块，我们称之为“片段”。虽然片段能很好地推动你的生产力，但大多数的实现都有这样一个缺点：你必须先定义你的代码片段，并且不能在运行时进行拓展。Emmet把片段这个概念提高到了一个新的层次：你可以设置CSS形式的能够动态被解析的表达式，然后根据你所输入的缩写来得到相应的内容。Emmet是很成熟的并且非常适用于编写HTML/XML 和 CSS 代码的前端开发工具，但也可以用于编程语言。 emmets使用方法输入值，按Tab键执行！如果不能执行，把输入法切换为英文后重试！ 生成HTML格式输入：1！ 执行结果：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 添加meta标签设置编码为utf-8输入：1meta:utf 执行结果：1&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; 初始化移动浏览显示输入：1meta:vp 执行结果：1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; 在IE运行最新的渲染模式输入：1meta:compat 执行结果：1&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot;&gt; 添加link标签输入：1link 执行结果：1&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt; 输入：1link:css 执行结果：1&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; 添加script标签输入：1script:src 执行结果：1&lt;script src=&quot;&quot;&gt;&lt;/script&gt; 添加元素标签.类名/ .类名（若不输入标签，默认添加div）输入：1p.name 执行结果：1&lt;p class=&quot;name&quot;&gt;&lt;/p&gt; 标签#ID名/ #ID名（若不输入标签，默认添加div）输入：1p#name 执行结果：1&lt;p id=&quot;name&quot;&gt;&lt;/p&gt; 添加a标签输入：1a 执行结果：1&lt;a href=&quot;&quot;&gt;&lt;/a&gt; 输入：1a:link 执行结果：1&lt;a href=&quot;http://&quot;&gt;&lt;/a&gt; 输入：1a:mail 执行结果：1&lt;a href=&quot;mailto:&quot;&gt;&lt;/a&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F07%2F08%2FMarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。Markdown还能用于编写说明文档，并且以“README.MD”的文件名保存在软件的目录下面。 标题语法： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 执行结果： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 字体语法： 1234**加粗的文字***倾斜的文字*`***斜体加粗的文字***~~加删除线的文字~~ 执行结果： 加粗的文字倾斜的文字斜体加粗的文字加删除线的文字 引用语法： 12345&gt;引用内容&gt;&gt;引用内容&gt;&gt;&gt;引用内容&gt;&gt;&gt;&gt;引用内容&gt;&gt;&gt;&gt;&gt;引用内容 执行结果： 引用内容 引用内容 引用内容 引用内容 引用内容 分割线语法： 1234-------******* 执行结果： 图片语法： 12345![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加![Markdown](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532958946535&amp;di=29f3a8f83cfc2ca43034a91a5aff163c&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.linux.net.cn%2Fdata%2Fattachment%2Falbum%2F201409%2F05%2F103936p36j31yrgeydquee.jpg) 执行结果： 超链接语法： 1234[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加[我的GitHub](https://github.com/AlexHyman) 执行结果： 我的GitHub 列表语法： 123456789101112无序列表- 无序列表+ 无序列表* 无序列表有序列表1.有序列表2.有序列表3.有序列表列表嵌套上一级和下一级之间敲三个空格即可 执行结果： 无序列表： 无序列表 无序列表 无序列表 有序列表：1.有序列表2.有序列表3.有序列表 列表嵌套： 无序列表 1.有序列表 2.有序列表 3.有序列表 表格语法： 12345678910|表头|表头|表头||---|:--:|---:||内容|内容|内容||内容|内容|内容|第二行分割表头和内容，中间用“-”填充文字默认居左|:---|：表示文字居左|:--:|：表示文字居中|---:|：表示文字居右 执行结果： 表头 表头 表头 内容 内容 内容 内容 内容 内容 代码语法： 单行代码：&#39;代码内容&#39;多行代码：&#39;&#39;&#39;代码内容&#39;&#39;&#39; 执行结果： 单行代码：代码内容多行代码：12代码内容代码内容 流程图语法： 12345678flowst=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 执行结果： flowst=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
